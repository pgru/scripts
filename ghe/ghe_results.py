__author__ = 'TaytaInti'
# makes plots with results of simmulation using .dat files generated by oommf2matrix (MATLAB datas)
# important, show localisation of file /head.tcl/

import os
import numpy as np
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.colors as colors

import struct
NX = 900

def getData(filesList):
    print "getData"
    data = np.zeros(NX)

    idx = 0
    for filename in filesList: 
        with open(filename, 'rb') as f:
            print filename
            #print "file opened"
            headers = {} #I know valuemultiplier isn't always present. This is checked later.
            #Parse headers
            a = ""
            #print "loading file"
            while not "#Data:" in a:
                a = f.readline().strip()
                #Determine if it's actually something we need as header data
                for key in ["SliceX", "BeamSpot", "SimTime", "File","Points"]:
                    if key in a:
                        headers[key] = str(a.split()[1]) #Known position FTW
                #All right, it may also be time data, which we should capture   
            #print "loaded headers, processing..."
            #for klucz, wartosc in headers.items():
            #    print klucz, wartosc
            #Initialize array to be populated
            #print "loading data"

            res = []
            while True:
                a = f.readline().strip()
                if len(a)==0:
                    break # EOF
                res.append(float(a))
            #print len(res)
            data += map(lambda x: x*x, res )
            idx += 1
            #data += res
    print idx
            
    #data = map(lambda x: x*x, data )

    x = np.arange(0., len(data), 1.0 )
    colorsLi = ["b", "g", "r", "c", "m", "y", "b"]
    ax = plt.subplot(111)
    #xr = NX - (klisza_lok[i] - Y05 - (NX - X05)*np.tan(FI))/np.tan(FI)
    plt.fill_between(x, 0, data, color=colorsLi[0], label=headers["SliceX"], alpha=0.5)
    ax.annotate(headers["BeamSpot"],
        xy=(float(headers["BeamSpot"]), max(data)), xycoords='data',
        xytext=(float(headers["BeamSpot"]), 0), textcoords='data',
        size=15, va="center", ha="center",
        bbox=dict(boxstyle="round4", fc="w"),
        arrowprops=dict(arrowstyle="fancy",
                        fc=colorsLi[2], 
                        ec=colorsLi[2],
                        connectionstyle="arc3"), 
        color=colorsLi[2],
        )

    

    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    #plt.plot(x, dane[1], 'g', label='y=-2')
    plt.xlabel('x[*2nm]')
    plt.ylabel('Amp')
    plt.suptitle('Film', fontsize=20)
    fig = plt.gcf()
    plt.show() 
    png_name = filename[0: (len(filename)-4)] + ".png"
    addr =  png_name
    fig.savefig(addr, dpi=100)   
    plt.close()

def findFiles(dir1):
    filelist = []
    for (path, dirs, files) in os.walk(dir1):
        break
    for file in files:
        tail = file[ (len(file)-8) : (len(file))]
        #head= file[0:6]
        if (tail == "1700.txt"):
            s = dir1+str(file)
            filelist.append(s)
    return filelist


if __name__ == "__main__":
    # [120, 150, 180, 210, 240, 270, 300, 330, 750,780,810,840, 870, 900, 930, 960, 990, 1020, 1050, 1080] # 40
    # [300, 330, 360, 390, 420, 450, 480, 950, 980, 1010, 1040, 1070, 1100, 1130, 1160, 1190, 1220,1250,1280,1310] # 50
    # [300, 330, 360, 390, 420, 450, 480, 510, # 75
    #   2000,2030,2060,2090, 2120, 2150, 2180, 2210, 2240, 2250, 2280, 2310, 2340, 2370, 2400, 2430, 2460, 2490, 2520, 2550, 2580, 2610, 2640, 2670, 2700] # 75
    # [270, 300, 330, 360, 390, 420, 450, 480,  # 60
    #   1200,1230,1260,1290, 1320, 1350, 1380, 1410, 1440, 1450, 1480, 1510, 1540, 1570, 1600, 1630, 1660, 1690, 1720, 1750, 1780, 1810, 1840, 1870, 1900], dirLoc, 2) # 60
    # [60, 90, 120, 150, 180, 210,240, 270, 300, 330, 
    #   720, 750,780,810,840, 870, 900, 930] # 30
    # [90, 120, 150, 180, 210,240, 270, 300, 330, 600, 630, 660, 690, 720, 750] # 20
    # [90, 120, 150, 180, 210,240, 270, 300, 330, 700, 730, 760, 790, 820, 850, 880, 910, 940, 970] # 25
    # 35 # [60, 90, 120, 150, 180, 210,240, 270, 300, 330, 720, 750,780,810,840, 870, 900, 930, 960, 990, 1020, 1050, 1080, 1110 ] # 35
    # 45 # [60, 90, 120, 150, 180, 210,240, 270, 300, 330, 360, 390, 
    #       420, 450, 480, 900,930,960,990,1020,1050,1080,1110,1140,1170,1200,1260,1290,1320]
    # 55 # [90, 120, 150, 180, 210,240, 270, 300, 330, 360, 390, 420, 450, 480, 
    #       1100,1130,1160,1190,1220,1250,1280,1310,1340,1370,1400,1460,1490,1520, 1550, 1580]
    # 65 # [300, 320, 350, 380,410, 450, 480, 510, 540, 570,600, 
    #       1700, 1730, 1760,1790,1820,1850,1880,1910,1940,1970,2000,2030,2060,2090,2120,2150,2180,2210,2240,2270,2300,2330,2360,2390]
    # dirLoc = '/home/pawel/2TB/mumax/mumax3.4_b3/ghe_75deg_klisza1.out/toProcess/1/'
    # filesList = findFiles(dirLoc)
    # print "processed directory: ", dirLoc
    # print "total number of processed files: ", len(filesList)
    # print "\n\n"
    # processFiles(filesList, [2000, 2400, 2800], dirLoc)
    # dirLoc = "/var/run/media/pawel/01e2f930-93ac-4e87-a8ab-53572c825901/mumax/mumax3.3&3.4beta/mumax3.4_b3/75deg_klisza2.out/toProcess/"
    dirLoc = "/home/pawel/2TB/mumax/mumax3/ghe_65.out.2process/"
    filesList = findFiles(dirLoc)
    print filesList
    getData(filesList)
    print (np.tan(75*np.pi/180))