__author__ = 'TaytaInti'
# makes plots with results of simmulation using .dat files generated by oommf2matrix (MATLAB datas)
# important, show localisation of file /head.tcl/

import os
import numpy as np
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.colors as colors

import struct

POINTS = 30


def getData(filesList):
    print "getData"
    data = np.zeros(POINTS)

    idx = 0
    
    toTr = []
    for filename in filesList: 
        with open(filename, 'rb') as f:
            #print filename
            #print "file opened"
            headers = {} #I know valuemultiplier isn't always present. This is checked later.
            #Parse headers
            a = ""
            #print "loading file"
            while not "#Data:" in a:
                a = f.readline().strip()
                #Determine if it's actually something we need as header data
                for key in ["SliceX", "BeamSpot", "SimTime", "File","Points"]:
                    if key in a:
                        headers[key] = str(a.split()[1]) #Known position FTW
                #All right, it may also be time data, which we should capture   
            #print "loaded headers, processing..."
            #for klucz, wartosc in headers.items():
            #    print klucz, wartosc
            #Initialize array to be populated
            #print "loading data"

            res = np.zeros(POINTS)
            i = 0
            while True:
                a = f.readline().strip()
                if len(a)==0:
                    break # EOF
                #res.append(float(a))
                res[i]=float(a)
                i+=1
            #print len(res)
            data += map(lambda x: x**2, res )
            idx += 1
            #data += res
        toTr.append( [ float(headers["SimTime"]), res[15] ])
        
    ftst = open("/home/pawel/2TB/mumax/mumax3/ZFOUR.txt", 'w')
    toTr = sorted(toTr, key=lambda list: list[0]) # sortowanie po czasach
    for elem in toTr:
        s = str(elem[0]) + "\t" +str(elem[1]) + "\n"
        ftst.write(s)
    ftst.close()

    #print toTr
    print "procesed files:", idx
    return data, toTr, headers
    
def ploting(data, toTr, headers ):
    #data = map(lambda x: x*x, data )
    x = np.arange(0., len(data), 1.0 )
    colorsLi = ["b", "g", "r", "c", "m", "y", "b"]
    
    fig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4,)

    #xr = NX - (klisza_lok[i] - Y05 - (NX - X05)*np.tan(FI))/np.tan(FI)
    ax0.fill_between(x, 0, data, color=colorsLi[0], label=str(headers["SliceX"]), alpha=0.5)
    ax0.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    #ax0.set_title("Przekroj paska dla "+ TAIL[0:(len(TAIL)-4)], fontsize=20)
    ax0.set_ylabel("Amp")
    ax0.set_xlabel("x [*2nm]")
    fig = plt.gcf()
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
    
    
    #ax = plt.subplot(112)
    x=map(lambda x: x[0], toTr)
    y=map(lambda x: x[1], toTr)
    ax1.plot(x,y,color=colorsLi[0])
    ax1.set_title("amplituda w srodku probki")
    ax1.set_xlabel("t [s]")
    ax1.set_ylabel("Amp")
    plt.subplots_adjust(hspace=0.5)
    plt.show()
    fig = plt.gcf()
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
    plt.close() 

def ploting1(dataIn, toTrIn, headersIn, dataOut, toTrOut, headersOut ):
    #data = map(lambda x: x*x, data )
    
    colorsLi = ["r", "g", "b", "c", "m", "y", "b"]
    
    #fig, (axTh, axThFT, ax0, ax1, ax2, ax3) = plt.subplots(nrows=6, ncols=2,)
    #fig, ((axTh, axThFT), (ax0, ax1), (ax2, ax3)) = plt.subplots(3, 2, sharex='col', sharey='row')

    ti=map(lambda x: x[0], toTrIn)
    yi=map(lambda x: x[1], toTrIn)
    xIn = np.arange(0., len(dataIn), 1.0 )

    f = 120e+09
    #yth = map(lambda t: np.sin(2*np.pi*f*(t-18/f))/(2*np.pi*f*(t-18/f)), ti)
    #yth = map(lambda t: 0.5+0.5*np.cos(np.pi*(t-0.5/f)*f), ti)
    a1 = [ 0 for t in ti if (t < 1/f) ]
    a2 = [ (0.5+0.5*np.cos(np.pi*(t-0.5/f)*f)) for t in ti if (t >= 1/f and t <= 3/f) ]
    a3 = [ 0 for t in ti if (t > 3/f ) ]
    print len(a1)
    print len(a2)
    print len(a3)
    yth = a1+a2+a3
    print len(ti)
    print len(yth)
    # [ s for s in squares if s > 5 and s < 50 ]
    axTh = plt.subplot(521)
    axTh.plot(ti,yth,color=colorsLi[1])
    axTh.set_title("Teoretyczna zmiana amplitudy")
    axTh.set_xlabel("t [s]")
    axTh.set_ylabel("SINC")

    sp = np.fft.fft(yth)
    dt = 1e-13;
    freq = np.fft.fftfreq(len(ti), dt )
    axThFT = plt.subplot(522)
    axThFT.plot(freq, np.abs(sp), color=colorsLi[1] )
    # axThFT.plot(freq, sp.real, freq, sp.imag)

    #axTh.plot(x,yth,color=colorsLi[1])
    axThFT.set_title("FFT SINC", fontsize=14)
    axThFT.set_xlabel("omega [Hz]")
    axThFT.set_ylabel("Amp")

    #ax = plt.subplot(112)
    axIN = plt.subplot(523)
    axIN.plot(yi,color=colorsLi[0])
    #axIN.plot(ti,yi,color=colorsLi[0])
    axIN.set_title("amplituda w srodku probki", fontsize=14)
    axIN.set_xlabel("t [s]")
    axIN.set_ylabel("Amp")
    plt.subplots_adjust(hspace=0.5)

    #xr = NX - (klisza_lok[i] - Y05 - (NX - X05)*np.tan(FI))/np.tan(FI)
    axINamp = plt.subplot(524)
    axINamp.fill_between(xIn, 0, dataIn, color=colorsLi[0], label=str(headersIn["SliceX"]), alpha=0.5)
    axINamp.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    axINamp.set_title("Przekroj paska dla "+str(headersIn["SliceX"]), fontsize=14)
    axINamp.set_ylabel("Amp")
    axINamp.set_xlabel("x [*2nm]")
    #fig = plt.gcf()
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
      
    t_fit=map(lambda x: x[0], toTrIn[1000:5000])
    y_fit=map(lambda x: x[1], toTrIn[1000:5000])

    yi_fitFFT = np.fft.fft(y_fit)
    dt = 1e-13;
    yi_fit_freq = np.fft.fftfreq(len(t_fit), dt )

    axINfit = plt.subplot(525)
    #axINfit.plot(y_fit,color=colorsLi[0])
    axINfit.plot(t_fit,y_fit,color=colorsLi[0])    # czasy utrudniaja PP
    axINfit.set_title("Zmiana amplitudy w wybranym zakresie t", fontsize=14)
    axINfit.set_xlabel("t [s]")
    axINfit.set_ylabel("Amp")
    plt.subplots_adjust(hspace=0.5)
    # FFT of Input
    axINfitFT = plt.subplot(526)
    axINfitFT.plot(yi_fit_freq, np.abs(yi_fitFFT), color=colorsLi[0] )
    axINfitFT.set_title("FFT IN", fontsize=14)
    axINfitFT.set_xlabel("omega [Hz]")
    axINfitFT.set_ylabel("Amp")



    t1=map(lambda x: x[0], toTrOut)
    y1=map(lambda x: x[1], toTrOut)
    xOut = np.arange(0., len(dataOut), 1.0 )

    #ax = plt.subplot(112)
    axOUT = plt.subplot(527)
    axOUT.plot(y1,color=colorsLi[2])
    #axOUT.plot(t1,y1,color=colorsLi[2])    # czasy urt. PP
    axOUT.set_title("amplituda w srodku probki", fontsize=14)
    axOUT.set_xlabel("t [s]")
    axOUT.set_ylabel("Amp")
    plt.subplots_adjust(hspace=0.5)

    #xr = NX - (klisza_lok[i] - Y05 - (NX - X05)*np.tan(FI))/np.tan(FI)
    axOUTamp = plt.subplot(528)
    axOUTamp.fill_between(xOut, 0, dataOut, color=colorsLi[2], label=str(headersOut["SliceX"]), alpha=0.5)
    axOUTamp.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    axOUTamp.set_title("Przekroj paska dla "+str(headersOut["SliceX"]), fontsize=14)
    axOUTamp.set_ylabel("Amp")
    axOUTamp.set_xlabel("x [*2nm]")
    #fig = plt.gcf()
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
      
    
    to_fit=map(lambda x: x[0], toTrOut[17500:21500])
    yo_fit=map(lambda x: x[1], toTrOut[17500:21500])

    yo_fitFFT = np.fft.fft(yo_fit)
    dt = 1e-13;
    yo_fit_freq = np.fft.fftfreq(len(to_fit), dt )

    axOUTfit = plt.subplot(529)
    #axOUTfit.plot(yo_fit,color=colorsLi[2])
    axOUTfit.plot(to_fit,yo_fit,color=colorsLi[2])
    axOUTfit.set_title("Zmiana amplitudy w wybranym zakresie t", fontsize=14)
    axOUTfit.set_xlabel("t [s]")
    axOUTfit.set_ylabel("Amp")
    plt.subplots_adjust(hspace=0.5)
    # FFT of Input
    axOUTfitFT = plt.subplot(5,2,10)
    axOUTfitFT.plot(yo_fit_freq, np.abs(yo_fitFFT), color=colorsLi[2] )
    axOUTfitFT.set_title("FFT OUT", fontsize=14)
    axOUTfitFT.set_xlabel("omega [Hz]")
    axOUTfitFT.set_ylabel("Amp")


    plt.show()
    fig = plt.gcf()
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
    plt.close() 

    print len(yo_fitFFT)
    print len(yo_fit_freq)
    print len(yi_fitFFT)
    print len(yi_fit_freq)

    #trans = plt.subplot(5,2,10)
    #plt.plot( yi_fit_freq, np.abs(yi_fitFFT), color=colorsLi[0] )
    ax0 = plt.subplot(3,1,1)
    ax0.fill_between( yi_fit_freq, 0, np.abs(yi_fitFFT), color=colorsLi[0], alpha=0.7 )
    ax0.fill_between( yo_fit_freq, 0, np.abs(yo_fitFFT), color=colorsLi[2], alpha=0.7 )
    ax0.set_title("FFT IN, OUT", fontsize=14)
    ax0.set_xlabel("omega [Hz]")
    ax0.set_ylabel("Amp")
    #plt.show() 
    #png_name = filename[ 0: (len(filename)-22)] +"results_" + TAIL[0:(len(TAIL)-4)] + ".png"
    #fig.savefig(png_name, dpi=100)   
    transLi = []
    freqLi  = []
    yiLi    = []
    yoLi    = []
    if len(yo_fit_freq) == len(yi_fit_freq):

        for i in range(len(yi_fit_freq)):
            if yi_fit_freq[i] >= 0e+09 and yi_fit_freq[i] <= 120e+09:
                freqLi.append(yi_fit_freq[i])
                transLi.append( ( np.abs(yo_fitFFT[i])/np.abs(yi_fitFFT[i]) )**2 )
                yiLi.append(np.abs(yi_fitFFT[i]))
                yoLi.append(np.abs(yo_fitFFT[i]))

        ax1 = plt.subplot(3,1,3)
        ax1.fill_between( freqLi, 0, transLi, color=colorsLi[1], alpha=0.7 )
        ax1.axis((freqLi[0],freqLi[len(freqLi)-1],0,1.2))
        ax1.set_title("Transmisja", fontsize=14)
        ax2 = plt.subplot(3,1,2)
        ax2.fill_between( freqLi, 0, yiLi, color=colorsLi[0], alpha=0.7 )
        ax2.fill_between( freqLi, 0, yoLi, color=colorsLi[2], alpha=0.7 )
        ax2.set_title("FFT IN, OUT", fontsize=14)
        ax2.set_xlabel("omega [Hz]")
        ax2.set_ylabel("Amp")

    plt.show()
    fig = plt.gcf()
    plt.close() 


def findFiles(dir1, head2str,  tailName):
    filelist = []
    for (path, dirs, files) in os.walk(dir1):
        break
    for file in files:
        tail = file[ (len(file)-7) : (len(file))]
        head = file[0:2]
        #head= file[0:6]
        if (tail == tailName and head==head2str):
            s = dir1+str(file)
            filelist.append(s)
    return filelist


if __name__ == "__main__":
    # dirLoc = '/home/pawel/2TB/mumax/mumax3.4_b3/ghe_75deg_klisza1.out/toProcess/1/'
    # filesList = findFiles(dirLoc)
    # print "processed directory: ", dirLoc
    # print "total number of processed files: ", len(filesList)
    # print "\n\n"
    # processFiles(filesList, [2000, 2400, 2800], dirLoc)
    dirLoc = "/home/pawel/2TB/mumax/mumax3/waveguide_window_v1.out/"
    tailIn = "100.txt"
    tailOut = "400.txt"
    tailB_ext = "75.txt"
    filesListB_ext = findFiles(dirLoc, "B_", tailIn)
    filesListInput = findFiles(dirLoc, "m0", tailIn)
    filesListOutput = findFiles(dirLoc, "m0", tailOut)
    #print filesList
    dataB, toTrB, headersB = getData(filesListB_ext)
    dataIn, toTrIn, headersIn = getData(filesListInput)
    dataOut, toTrOut, headersOut = getData(filesListOutput)

    ploting1(dataIn, toTrIn, headersIn, dataOut, toTrOut, headersOut)

    # dataOut, toTrOut, headersOut = getData(filesListOutput)
    # ploting(dataOut, toTrOut, headersOut)